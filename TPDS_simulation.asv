databases = 7;                      % number of databases queried
queries = 25;                       % number of queries/ number of cells in the cluster
T_epoch = 5;                        % period in hours for rekeying and for querying databases 
lambda_join = 1;                    % mean for the join events modeled as a poisson distribution
n = 1000;                           % current number of users in a cluster
rekeying = 77;                      % time in seconds needed for performing a rekeying operation
max_n = 2000;                       % max number of users within a cluster, could be used as a convergence criterion
cluster_cells = [1 5 10 25];    	% array containing number of cells in the cluster / maximum number of queries
rekeying_delay = 77;   				% time in seconds needed for performing a rekeying operation
lambda_user_ON = 15;				% mean of the distribution modelling users' on periods
lambda_user_OFF = 30;				% mean of the distribution modelling users' off periods
query_delay = [1.6 2.3 3.6 13.15];	% array containing the time needed for the leader to query the databases and get spectrum availability information for each entry in cluster_cells
lambda_cell_ON = 15;				% mean for the number of cells that are active (i.e. some users are located there) during the current period T_epoch
user_leader_query_delay = 1;		% time in seconds for the user to get a resource from the leader after turning active

no_of_epochs = 1;
total_time_matrix = zeros(100,10);
no_of_times_active_matrix = zeros(100,10);
active=1;

while TRUE
    if active
        on_durations=poissrnd(15,100,10);
        for i=1:100
            for j=1:10
                if total_time_matrix(i,j) < no_of_epochs*300
                    no_of_times_active_matrix(i,j)=no_of_times_active_matrix(i,j)+1;
                    total_time_matrix(i,j)=total_time_matrix(i,j)+on_durations(i,j);
                end    
            end
        end
        active=0;
    else
        off_durations=poissrnd(30,100,10);
        for i=1:100
            for j=1:10
               total_time_matrix(i,j)=total_time_matrix(i,j)+off_durations(i,j);  
            end
        end
        active=1;
    end
    c=0;
    for i=1:100
        for j=1:10
            if total_time_matrix(i,j)>no_of_epochs*300
                c=c+1;
            end
        end
    end
    if c==1000
        break
    end
end
total_delay=0;
for i=1:100
    for j=1:10
        total_delay=total_delay+no_of_times_active_matrix(i,j);
    end
end
fprintf("Total delay for 1000 users in a cluster is : ");
disp(n_users_jo);




